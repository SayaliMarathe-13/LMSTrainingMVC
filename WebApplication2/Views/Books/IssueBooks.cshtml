@model DAL.Models.BookIssueModel

@{
    var isEdit = Model.BookIssueId > 0;
    ViewBag.Title = isEdit ? "Edit Issue Book" : "Issue Book";
}

<h3 class="text-center text-primary fw-bold">@ViewBag.Title</h3>

<div class="container mt-5 pt-5">
    @using (Html.BeginForm("", "", FormMethod.Post, new { @id = "issueBookForm" }))
    {
        @Html.HiddenFor(m => m.BookIssueId)

        if (isEdit)
        {
            @Html.HiddenFor(m => m.CreatedOn)
            @Html.HiddenFor(m => m.CreatedBy)
        }

        <div class="row g-3 mb-4 text-start">
            <div class="col-md-6">
                @Html.LabelFor(m => m.MemberId, new { @class = "form-label" })
                @Html.DropDownListFor(m => m.MemberId,
                     new SelectList(Model.MembersList, "MemberId", "MemberName"),
                     "-- Select Member --",
                     new { @class = "form-select", @id = "MemberId" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(m => m.LibrarianId, new { @class = "form-label" })
                @Html.TextBoxFor(m => m.LibrarianId, new { @class = "form-control", @id = "LibrarianId", type = "number" })
                @Html.ValidationMessageFor(m => m.LibrarianId, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(m => m.IssueDate, new { @class = "form-label" })
                @Html.TextBoxFor(m => m.IssueDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @id = "IssueDate" })
                @Html.ValidationMessageFor(m => m.IssueDate, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(m => m.DueDate, new { @class = "form-label" })
                @Html.TextBoxFor(m => m.DueDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @id = "DueDate" })
                @Html.ValidationMessageFor(m => m.DueDate, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-12">
                <label class="form-label">Books</label>
                <button type="button" class="btn btn-outline-primary ms-3" id="btnAddBook">Add Book</button>
            </div>

            <div class="modal fade" id="bookSelectionModal" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Select Books</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body" id="booksListContainer"></div>
                    </div>
                </div>
            </div>

            <div class="col-md-12" id="selectedBooksContainer">
                <table class="table table-bordered table-sm">
                    <thead class="table-light">
                        <tr>
                            <th>Book Name</th>
                            <th>ISBN</th>
                            <th>Publisher</th>
                            <th>Course</th>
                            <th>Quantity</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="booksListBody">
                    </tbody>
                </table>
            </div>
        </div>

        <div class="d-flex justify-content-center gap-3 mt-3">
            <button type="submit" class="btn btn-success px-4">
                @(isEdit ? "Update" : "Save")
            </button>
            <a href="@Url.Action("IssueBookList", "Books")" class="btn btn-secondary px-4">Cancel</a>
        </div>
    }
</div>

<script>
    $(document).ready(function () {

        var selectedBooks = [];

        // Populate selectedBooks if editing
        @if (Model.IssuedBooks != null && Model.IssuedBooks.Any())
        {
           <text>
                selectedBooks = @Html.Raw(Json.Encode(Model.IssuedBooks.Select(b => new {
                               b.BookId,
                               b.BookIssueDetailId,
                               b.BookName,
                               b.ISBN,
                               b.PublisherName,
                               b.CourseName,
                               Quantity = b.Quantity,
                               IsNew = false,
                               QuantityChanged = false
                           })));
                renderSelectedBooksTable(selectedBooks);
           </text>
        }

        // Open modal and load book list
        $('#btnAddBook').click(function () {
            $.ajax({
                url: '/Books/GetBooksList',
                type: 'POST',
                data: { IsSelectionMode: true },
                success: function (result) {
                    $('#booksListContainer').html(result);

                    // Check already selected books in modal
                    selectedBooks.forEach(function (book) {
                        $('.book-checkbox[data-book-id="' + book.BookId + '"]').prop('checked', true);
                    });

                    $('#bookSelectionModal').modal('show');
                },
                error: function () {
                    alert('Failed to load books list.');
                }
            });
        });

        // Checkbox change in modal for selecting/deselecting books
        $('#booksListContainer').on('change', '.book-checkbox', function () {
            var bookId = parseInt($(this).data('book-id'));
            var isChecked = $(this).is(':checked');

            if (isChecked) {
                if (!selectedBooks.some(b => b.BookId === bookId)) {
                    selectedBooks.push({
                        BookId: bookId,
                        BookName: $(this).data('book-name'),
                        ISBN: $(this).data('isbn'),
                        PublisherName: $(this).data('publisher-name'),
                        CourseName: $(this).data('course-name'),
                        Quantity: 1,
                        IsNew: true,
                        QuantityChanged: false
                    });
                }
            } else {
                selectedBooks = selectedBooks.filter(b => b.BookId !== bookId);
            }

            renderSelectedBooksTable(selectedBooks);
        });

        // Render the selected books table with quantity dropdown and remove button
        function renderSelectedBooksTable(books) {
            var tbody = $('#booksListBody');
            tbody.empty();

            books.forEach(function (book) {
                var quantityDropdown = $('<select>')
                    .addClass('form-select form-select-sm quantity-dropdown')
                    .attr('data-book-id', book.BookId);

                for (let i = 1; i <= 10; i++) {
                    quantityDropdown.append(
                        $('<option>').val(i).text(i).prop('selected', i === book.Quantity)
                    );
                }

                var row = $('<tr>')
                    .attr('data-book-id', book.BookId)
                    .attr('data-book-issuedetail-id', book.BookIssueDetailId || 0);

                row.append($('<td>').text(book.BookName));
                row.append($('<td>').text(book.ISBN));
                row.append($('<td>').text(book.PublisherName));
                row.append($('<td>').text(book.CourseName));
                row.append($('<td>').append(quantityDropdown));
                row.append(
                    $('<td>').html(
                        '<button type="button" class="btn btn-sm btn-danger remove-book" data-book-id="' + book.BookId + '">Remove</button>'
                    )
                );

                tbody.append(row);
            });
        }

        // Update quantity in selectedBooks when dropdown changes (event delegation)
        $('#booksListBody').on('change', '.quantity-dropdown', function () {
            var bookId = parseInt($(this).data('book-id'));
            var newQuantity = parseInt($(this).val());

            var book = selectedBooks.find(b => b.BookId === bookId);
            if (book) {
                book.QuantityChanged = (book.Quantity !== newQuantity);
                book.Quantity = newQuantity;
            }
        });

        // Remove book from UI and backend
        $('#booksListBody').on('click', '.remove-book', function () {
            var bookId = parseInt($(this).data('book-id'));

            // Find the BookIssueDetailId associated with this book row
            var bookIssueDetailId = $(this).closest('tr').data('book-issuedetail-id');
            console.log(bookIssueDetailId)
            if (bookIssueDetailId && bookIssueDetailId > 0) {
                $.ajax({
                    url: '/Books/DeleteBookIssueDetail',
                    type: 'POST',
                    data: { bookIssueDetailId: bookIssueDetailId },
                    success: function (response) {
                      
                        if (response.success) {
                   
                            // Remove from UI and selectedBooks array
                            selectedBooks = selectedBooks.filter(b => b.BookId !== bookId);
                            renderSelectedBooksTable(selectedBooks);
                        } else {
                            alert('Failed to remove book: ' + response.message);
                        }
                    },
                    error: function () {
                        alert('Error occurred while removing book.');
                    }
                });
            } else {
                // If new book (no DB ID yet), just remove locally
                selectedBooks = selectedBooks.filter(b => b.BookId !== bookId);
                renderSelectedBooksTable(selectedBooks);
            }
        });


        // Submit form with selectedBooks and changedBooks
        $('#issueBookForm').submit(function (e) {
            e.preventDefault();

            var changedBooks = selectedBooks.filter(b => b.QuantityChanged || b.IsNew);

            var model = {
                BookIssueId: $('#BookIssueId').val(),
                MemberId: $('#MemberId').val(),
                LibrarianId: $('#LibrarianId').val(),
                IssueDate: $('#IssueDate').val(),
                DueDate: $('#DueDate').val(),
                CreatedBy: 1,
                ChangedBooks: changedBooks,
                SelectedBooks: selectedBooks
            };

            $.ajax({
                url: '@Url.Action("IssueBooks", "Books")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(model),
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        window.location.href = '@Url.Action("IssueBookList", "Books")';
                    } else {
                        alert('Failed: ' + response.message);
                    }
                },
                error: function () {
                    alert('An unexpected error occurred while issuing books.');
                }
            });
        });
    });
</script>
