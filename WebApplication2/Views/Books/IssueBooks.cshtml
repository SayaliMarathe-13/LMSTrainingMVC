@model DAL.Models.BookIssueModel

@{
    var isEdit = Model.BookIssueId > 0;
    ViewBag.Title = isEdit ? "Edit Issue Book" : "Issue Book";
}

<h3 class="text-center text-primary fw-bold">@ViewBag.Title</h3>

<div class="container mt-5 pt-5">
    @using (Html.BeginForm("", "", FormMethod.Post, new { @id = "issueBookForm" }))
    {
        @Html.HiddenFor(m => m.BookIssueId)

        if (isEdit)
        {
            @Html.HiddenFor(m => m.CreatedOn)
            @Html.HiddenFor(m => m.CreatedBy)
        }

        <div class="row g-3 mb-4 text-start">
            <div class="col-md-6">
                @Html.LabelFor(m => m.MemberId, new { @class = "form-label" })
                @Html.DropDownListFor(m => m.MemberId,
                     new SelectList(Model.MembersList, "MemberId", "MemberName"),
                     "-- Select Member --",
                     new { @class = "form-select", @id = "MemberId" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(m => m.LibrarianId, new { @class = "form-label" })
                @Html.TextBoxFor(m => m.LibrarianId, new { @class = "form-control", @id = "LibrarianId", type = "number" })
                @Html.ValidationMessageFor(m => m.LibrarianId, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(m => m.IssueDate, new { @class = "form-label" })
                @Html.TextBoxFor(m => m.IssueDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @id = "IssueDate" })
                @Html.ValidationMessageFor(m => m.IssueDate, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                @Html.LabelFor(m => m.DueDate, new { @class = "form-label" })
                @Html.TextBoxFor(m => m.DueDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @id = "DueDate" })
                @Html.ValidationMessageFor(m => m.DueDate, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-12">
                <label class="form-label">Books</label>
                <button type="button" class="btn btn-outline-primary ms-3" id="btnAddBook">Add Book</button>
            </div>

            <div class="modal fade" id="bookSelectionModal" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Select Books</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body" id="booksListContainer"></div>
                    </div>
                </div>
            </div>

            <div class="col-md-12" id="selectedBooksContainer">
                <table class="table table-bordered table-sm">
                    <thead class="table-light">
                        <tr>
                            <th>Book Name</th>
                            <th>ISBN</th>
                            <th>Publisher</th>
                            <th>Course</th>
                            <th>Quantity</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="booksListBody">
                    </tbody>
                </table>
            </div>
        </div>

        <div class="d-flex justify-content-center gap-3 mt-3">
            <button type="submit" class="btn btn-success px-4">
                @(isEdit ? "Update" : "Save")
            </button>
            <a href="@Url.Action("IssueBookList", "Books")" class="btn btn-secondary px-4">Cancel</a>
        </div>
    }
    <!-- Modal for quantity error -->
    <div class="modal fade" id="quantityErrorModal" tabindex="-1" aria-labelledby="quantityErrorModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="quantityErrorModalLabel">Invalid Quantity</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="quantityErrorMessage">
                    <!-- Message gets injected here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteConfirmLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to remove this book from the list?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Remove</button>
                </div>
            </div>
        </div>
    </div>

</div>
<script>
$(document).ready(function () {

    var selectedBooks = [];

    // Load existing issued books if any (from Model)
    @if (Model.IssuedBooks != null && Model.IssuedBooks.Any())
    {
        <text>
        selectedBooks = @Html.Raw(Json.Encode(Model.IssuedBooks.Select(b => new {
            b.BookId,
            b.BookIssueDetailId,
            b.BookName,
            b.ISBN,
            b.PublisherName,
            b.CourseName,
            Quantity = b.Quantity
        })));
        renderSelectedBooksTable(selectedBooks);
        </text>
    }

    // Open modal & load books list
    $('#btnAddBook').click(function () {
        $.ajax({
            url: '/Books/GetBooksList',
            type: 'POST',
            data: { IsSelectionMode: true },
            success: function (result) {
                $('#booksListContainer').html(result);

                // Mark checkboxes already selected
                selectedBooks.forEach(function (book) {
                    $('.book-checkbox[data-book-id="' + book.BookId + '"]').prop('checked', true);
                });

                $('#bookSelectionModal').modal('show');
            },
            error: function () {
                alert('Failed to load books list.');
            }
        });
    });

    // Checkbox checked/unchecked in modal
    $('#booksListContainer').on('change', '.book-checkbox', function () {
        var bookId = parseInt($(this).data('book-id'));
        var isChecked = $(this).is(':checked');

        if (isChecked) {
            // Add if not already selected
            if (!selectedBooks.some(b => b.BookId === bookId)) {
                selectedBooks.push({
                    BookId: bookId,
                    BookIssueDetailId: 0,
                    BookName: $(this).data('book-name'),
                    ISBN: $(this).data('isbn'),
                    PublisherName: $(this).data('publisher-name'),
                    CourseName: $(this).data('course-name'),
                    Quantity: 1
                });
            }
        } else {
            // Remove from selectedBooks
            selectedBooks = selectedBooks.filter(b => b.BookId !== bookId);
        }

        renderSelectedBooksTable(selectedBooks);
    });

    // Render selected books table
    function renderSelectedBooksTable(books) {
        var tbody = $('#booksListBody');
        tbody.empty();

        books.forEach(function (book) {
            var quantityDropdown = $('<select>')
                .addClass('form-select form-select-sm quantity-dropdown')
                .attr('data-book-id', book.BookId)
                .attr('data-prev-value', book.Quantity)


            for (let i = 1; i <= 10; i++) {
                quantityDropdown.append(
                    $('<option>').val(i).text(i).prop('selected', i === book.Quantity)
                );
            }

            var row = $('<tr>')
                .attr('data-book-id', book.BookId)
                .attr('data-book-issuedetail-id', book.BookIssueDetailId || 0);

            row.append($('<td>').text(book.BookName));
            row.append($('<td>').text(book.ISBN));
            row.append($('<td>').text(book.PublisherName));
            row.append($('<td>').text(book.CourseName));
            row.append($('<td>').append(quantityDropdown));
            row.append(
                $('<td>').html(
                    '<button type="button" class="btn btn-sm btn-danger remove-book" data-book-id="' + book.BookId + '">Remove</button>'
                )
            );

            tbody.append(row);
        });
    }

    // Quantity dropdown changed
    // Handle quantity change and show modal if quantity exceeds available copies
    $('#booksListBody').on('change', '.quantity-dropdown', function () {
        var quantityInput = $(this);
        var bookId = parseInt(quantityInput.data("book-id"));
        var enteredQuantity = parseInt(quantityInput.val());

        if (isNaN(enteredQuantity) || enteredQuantity <= 0) return;

        var book = selectedBooks.find(b => b.BookId === bookId);
        if (!book) return;

        // Ajax to get available copies
        $.ajax({
            url: '/Books/GetAvailableCopies',
            data: { bookId: bookId },
            success: function (res) {
                if (res.success) {
                    if (enteredQuantity > res.availableCopies) {
                        // Set error message in modal
                        $('#quantityErrorMessage').text(`Only ${res.availableCopies} copies are available.`);

                        // Show modal (Bootstrap 5.2.3 way)
                        var modal = new bootstrap.Modal(document.getElementById('quantityErrorModal'));
                        modal.show();

                        // Revert back to last valid quantity (stored in data-prev-value)
                        quantityInput.val(quantityInput.attr('data-prev-value'));
                    } else {
                        // Update quantity and save as previous
                        book.Quantity = enteredQuantity;
                        quantityInput.attr('data-prev-value', enteredQuantity);
                    }
                }
            }
        });
    });

    let bookIdToDelete = null;

    // When delete button is clicked
    $('#booksListBody').on('click', '.remove-book', function () {
        bookIdToDelete = parseInt($(this).data('book-id'));
        $('#deleteConfirmModal').modal('show'); // Show Bootstrap modal
    });

    // When confirm delete is clicked
    $('#confirmDeleteBtn').on('click', function () {
        if (bookIdToDelete !== null) {
            // Remove the book
            selectedBooks = selectedBooks.filter(b => b.BookId !== bookIdToDelete);

            // Re-render the table
            renderSelectedBooksTable(selectedBooks);

            // Reset and hide modal
            bookIdToDelete = null;
            $('#deleteConfirmModal').modal('hide');
        }
    });


    // Submit form - send only required data
    $('#issueBookForm').submit(function (e) {
        e.preventDefault();

        var model = {
            BookIssueId: $('#BookIssueId').val(),
            MemberId: $('#MemberId').val(),
            LibrarianId: $('#LibrarianId').val(),
            IssueDate: $('#IssueDate').val(),
            DueDate: $('#DueDate').val(),
            CreatedBy: 1,
            SelectedBooks: selectedBooks.map(b => ({
                BookIssueDetailId: b.BookIssueDetailId || 0,
                BookId: b.BookId,
                Quantity: b.Quantity
            }))
        };

        $.ajax({
            url: '@Url.Action("IssueBooks", "Books")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(model),
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    window.location.href = '@Url.Action("IssueBookList", "Books")';
                } else {
                    alert('Failed: ' + response.message);
                }
            },
            error: function () {
                alert('An unexpected error occurred while issuing books.');
            }
        });
    });
   

});
</script>

