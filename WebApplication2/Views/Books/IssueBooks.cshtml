@model DAL.Models.BookIssueModel

@{
    var isEdit = Model.BookIssueId > 0;
    ViewBag.Title = isEdit ? "Edit Issue Book" : "Issue Book";
}

<h3 class="text-center text-primary fw-bold">@ViewBag.Title</h3>

<div class="container mt-5 pt-5">
    @using (Html.BeginForm("", "", FormMethod.Post, new { @id = "issueBookForm" }))
    {
        @Html.HiddenFor(m => m.BookIssueId)

        if (isEdit)
        {
            @Html.HiddenFor(m => m.CreatedOn)
            @Html.HiddenFor(m => m.CreatedBy)
        }

        <div class="row g-3 mb-4 text-start">
            <div class="col-md-6">
                @Html.LabelFor(m => m.MemberId, new { @class = "form-label" })
                @Html.DropDownListFor(m => m.MemberId,
                    new SelectList(
                        Model.MembersList.Select(m => new
                        {
                            MemberId = m.MemberId,
                            DisplayText = m.MemberId + " - " + m.MemberName
                        }),
                        "MemberId", "DisplayText"
                    ),
                    "-- Select Member --",
                    new { @class = "form-select", @id = "MemberId" })
            </div>


            <div class="col-md-6">
                @Html.LabelFor(m => m.LibrarianId, new { @class = "form-label" })
                @Html.TextBoxFor(m => m.LibrarianId, new { @class = "form-control", @id = "LibrarianId", type = "number" })
               @* @Html.ValidationMessageFor(m => m.LibrarianId, "", new { @class = "text-danger" })*@
            </div>

            <div class="col-md-6">
                @Html.LabelFor(m => m.IssueDate, new { @class = "form-label" })
                @Html.TextBoxFor(m => m.IssueDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @id = "IssueDate" })
              @*  @Html.ValidationMessageFor(m => m.IssueDate, "", new { @class = "text-danger" })*@
            </div>

            <div class="col-md-6">
                @Html.LabelFor(m => m.DueDate, new { @class = "form-label" })
                @Html.TextBoxFor(m => m.DueDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @id = "DueDate" })
               @* @Html.ValidationMessageFor(m => m.DueDate, "", new { @class = "text-danger" })*@
            </div>

            <div class="col-md-12">
                <label class="form-label">Books</label>
                <button type="button" class="btn btn-outline-primary ms-3" id="btnAddBook">Add Book</button>
            </div>
            <div class="form-group">
                <label for="FileUpload">Upload Documents</label>
                <input type="file" id="FileUpload" class="form-control" multiple />
            </div>

            <div class="modal fade" id="bookSelectionModal" tabindex="-1" data-bs-focus="false">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Select Books</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body p-0" id="booksListContainer"></div>
                    </div>
                </div>
            </div>

            <div class="col-md-12" id="selectedBooksContainer">
                <table class="table table-bordered table-sm">
                    <thead class="table-light">
                        <tr>
                            <th>Book Name</th>
                            <th>ISBN</th>
                            <th>Publisher</th>
                            <th>Course</th>
                            <th>Quantity</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="booksListBody"></tbody>
                </table>
            </div>
        </div>

        <div id="existingDocumentsSection" class="mt-3">
            <h5 style="text-align: left;">Uploaded Documents</h5>
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th style="text-align: left;">File Name</th>
                        <th style="width: 120px; text-align:left">Action</th>
                    </tr>
                </thead>
                <tbody id="existingDocumentsTable"></tbody>
            </table>
        </div>


        <div class="d-flex justify-content-center gap-3 mt-3">
            <button type="submit" class="btn btn-success px-4">
                @(isEdit ? "Update" : "Save")
            </button>
            <a href="@Url.Action("IssueBooksList", "Books")" class="btn btn-secondary px-4">Cancel</a>
        </div>
    }
    <!-- Modal for quantity error -->
    <div class="modal fade" id="quantityErrorModal" tabindex="-1" aria-labelledby="quantityErrorModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="quantityErrorModalLabel">Invalid Quantity</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="quantityErrorMessage">
                    <!-- Message gets injected here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteConfirmLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to remove this item from the list?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Remove</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    let selectedFiles = [];
    $(document).ready(function () {
        $('.btn-close[data-bs-dismiss="modal"]').on('click', function () {
            $(this).blur();
            $.post('/Books/SetSelectionMode', { isSelectionMode: false });
        });  

        var selectedBooks = [];
        let deletedDocumentIds = [];

        $('#FileUpload').on('change', function (e) {
            const files = Array.from(e.target.files);

            // Merge new files with already selected (avoid duplicates by name)
            files.forEach(file => {
                if (!selectedFiles.some(f => f.name === file.name)) {
                    selectedFiles.push(file);
                }
            });

            renderFileList();
        });

       // Load existing issued books if any (from Model)
        @if (Model.IssuedBooks != null && Model.IssuedBooks.Any())
{
    <text>
        selectedBooks = @Html.Raw(Json.Encode(Model.IssuedBooks.Select(b => new {
        b.BookId,
        b.BookIssueDetailId,
        b.BookName,
        b.ISBN,
        b.PublisherName,
        b.CourseName,
        Quantity = b.Quantity
    })));
        renderSelectedBooksTable(selectedBooks);
        </text>
}

        @if (Model.BookIssueId > 0)
{
    <text>
        loadExistingDocuments(@Model.BookIssueId);
        </text>
}


        $('#btnAddBook').click(function () {
            $.post('/Books/SetSelectionMode', { isSelectionMode: true }, function () {
                $.ajax({
                    url: '/Books/List',
                    type: 'GET',
                    success: function (result) {
                        $('#booksListContainer').html(result);
                        selectedBooks.forEach(function (book) {
                            $('.book-checkbox[data-book-id="' + book.BookId + '"]').prop('checked', true);
                        });
                        $('#bookSelectionModal').modal('show');
                     
                    }
                });
            });
        });

        $('#booksListContainer').on('change', '.book-checkbox', function () {
            var checkbox = $(this);
            var bookId = parseInt(checkbox.data('book-id'));
            var isChecked = checkbox.is(':checked');

            if (isChecked) {
                // Before adding, check available copies
                $.ajax({
                    url: '/Books/GetAvailableCopies',
                    data: { bookId: bookId },
                    success: function (res) {
                        if (res.success) {
                            if (res.availableCopies < 1) {
                                // Show error modal/message
                                $('#quantityErrorMessage').text('This book is out of stock and cannot be selected.');
                                var modal = new bootstrap.Modal(document.getElementById('quantityErrorModal'));
                                modal.show();

                                // Uncheck the checkbox immediately to prevent selection
                                checkbox.prop('checked', false);
                            } else {
                                // Add if not already selected
                                if (!selectedBooks.some(b => b.BookId === bookId)) {
                                    selectedBooks.push({
                                        BookId: bookId,
                                        BookIssueDetailId: 0,
                                        BookName: checkbox.data('book-name'),
                                        ISBN: checkbox.data('isbn'),
                                        PublisherName: checkbox.data('publisher-name'),
                                        CourseName: checkbox.data('course-name'),
                                        Quantity: 1
                                    });
                                }
                                renderSelectedBooksTable(selectedBooks);
                            }
                        } else {
                            // Handle AJAX failure or error response
                            alert('Failed to check book availability. Please try again.');
                            checkbox.prop('checked', false);
                        }
                    },
                    error: function () {
                        alert('Error checking book availability. Please try again.');
                        checkbox.prop('checked', false);
                    }
                });
            } else {
                // Remove from selectedBooks if unchecked
                selectedBooks = selectedBooks.filter(b => b.BookId !== bookId);
                renderSelectedBooksTable(selectedBooks);
            }
        });

        // Render selected books table
        function renderSelectedBooksTable(books) {
            var tbody = $('#booksListBody');
            tbody.empty();

            books.forEach(function (book) {
                var quantityDropdown = $('<select>')
                    .addClass('form-select form-select-sm quantity-dropdown')
                    .attr('data-book-id', book.BookId)
                    .attr('data-prev-value', book.Quantity)


                for (let i = 1; i <= 10; i++) {
                    quantityDropdown.append(
                        $('<option>').val(i).text(i).prop('selected', i === book.Quantity)
                    );
                }

                var row = $('<tr>')
                    .attr('data-book-id', book.BookId)
                    .attr('data-book-issuedetail-id', book.BookIssueDetailId || 0);

                row.append($('<td>').text(book.BookName));
                row.append($('<td>').text(book.ISBN));
                row.append($('<td>').text(book.PublisherName));
                row.append($('<td>').text(book.CourseName));
                row.append($('<td>').append(quantityDropdown));
                row.append(
                    $('<td>').html(
                        '<button type="button" class="btn btn-sm btn-danger remove-book" data-book-id="' + book.BookId + '">Remove</button>'
                    )
                );

                tbody.append(row);
            });
        }

        // Quantity dropdown changed
        // Handle quantity change and show modal if quantity exceeds available copies
        $('#booksListBody').on('change', '.quantity-dropdown', function () {
            var quantityInput = $(this);
            var bookId = parseInt(quantityInput.data("book-id"));
            var enteredQuantity = parseInt(quantityInput.val());

            if (isNaN(enteredQuantity) || enteredQuantity <= 0) return;

            var book = selectedBooks.find(b => b.BookId === bookId);
            if (!book) return;

            // Ajax to get available copies
            $.ajax({
                url: '/Books/GetAvailableCopies',
                data: { bookId: bookId },
                success: function (res) {
                    if (res.success) {
                        if (enteredQuantity > res.availableCopies) {
                            // Set error message in modal
                            $('#quantityErrorMessage').text(`Only ${res.availableCopies} copies are available.`);

                            // Show modal (Bootstrap 5.2.3 way)
                            var modal = new bootstrap.Modal(document.getElementById('quantityErrorModal'));
                            modal.show();

                            // Revert back to last valid quantity (stored in data-prev-value)
                            quantityInput.val(quantityInput.attr('data-prev-value'));
                        } else {
                            // Update quantity and save as previous
                            book.Quantity = enteredQuantity;
                            quantityInput.attr('data-prev-value', enteredQuantity);
                        }
                    }
                }
            });
        });

        let bookIdToDelete = null;

        // When delete button is clicked
        $('#booksListBody').on('click', '.remove-book', function () {
            bookIdToDelete = parseInt($(this).data('book-id'));
            $('#deleteConfirmModal').modal('show');
        });

        // When confirm delete is clicked
        $('#confirmDeleteBtn').on('click', function () {
            if (bookIdToDelete !== null) {
                // Remove the book
                selectedBooks = selectedBooks.filter(b => b.BookId !== bookIdToDelete);

                // Re-render the table
                renderSelectedBooksTable(selectedBooks);

                // Reset and hide modal
                bookIdToDelete = null;
                $('#deleteConfirmModal').modal('hide');
            }
            if (docIdToDelete) {
                deletedDocumentIds.push(docIdToDelete);

                $(docRowToDelete).closest('tr').remove();

                docIdToDelete = null;
                docRowToDelete = null;

                $('#deleteConfirmModal').modal('hide');
            }
        });

        $('#issueBookForm').submit(function (e) {
            e.preventDefault();

            var model = {
                BookIssueId: $('#BookIssueId').val(),
                MemberId: $('#MemberId').val(),
                LibrarianId: $('#LibrarianId').val(),
                IssueDate: $('#IssueDate').val(),
                DueDate: $('#DueDate').val(),
                CreatedBy: 1,
                SelectedBooks: selectedBooks.map(b => ({
                    BookIssueDetailId: b.BookIssueDetailId || 0,
                    BookId: b.BookId,
                    Quantity: b.Quantity
                })),
                DeletedDocumentIds: deletedDocumentIds
            };
            var formData = new FormData();
            formData.append("model", JSON.stringify(model));
            // Append files manually
            selectedFiles.forEach(file => {
                formData.append("SupportDocuments", file);
            });

            $.ajax({
                url: '@Url.Action("IssueBooks", "Books")',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {
                        alert(response.message);
                        window.location.href = '@Url.Action("IssueBooksList", "Books")';
                    } else {
                        alert('Failed: ' + response.message);
                    }
                },
                error: function () {
                    alert('An unexpected error occurred while issuing books.');
                }
            });
        });
        function loadExistingDocuments(bookIssueId) {
            debugger;
            $.ajax({
                url: '/Books/GetDocuments',
                type: 'GET',
                data: { bookIssueId: bookIssueId },
                success: function (data) {
                    $('#existingDocumentsTable').empty();

                    if (data && data.length > 0) {
                        data.forEach(function (doc) {
                            $('#existingDocumentsTable').append(`
                        <tr data-id="${doc.DocumentId}">
                            <td style="text-align: left;">${doc.FileName}</td>
                            <td>
                               <button type="button"
                                        class="btn btn-outline-success btn-sm me-2"
                                        onclick="window.location.href='/Books/DownloadDocument?documentId=${doc.DocumentId}'"
                                        title="Download">
                                    <i class="bi bi-download"></i>
                                </button>

                                <button type="button"
                                        class="btn btn-outline-danger btn-sm delete-document"
                                        onclick="confirmDeleteDocument(${doc.DocumentId}, this)"
                                        title="Delete">
                                    <i class="bi bi-trash"></i>
                                </button>

                            </td>
                        </tr>
                    `);
                        });
                    } else {
                        $('#existingDocumentsTable').append(`<tr><td colspan="2" class="text-center">No documents found.</td></tr>`);
                    }
                },
                error: function () {
                    alert("Failed to load documents.");
                }
            });
        }

    });
    let docIdToDelete = null;
    let docRowToDelete = null;

    function confirmDeleteDocument(documentId, btnElement) {
        docIdToDelete = documentId;
        docRowToDelete = btnElement;
        $('#deleteConfirmModal').modal('show');
    }
    function removeNewFile(index) {
        console.log("Removing file at index:", index);
        console.log("Before splice:", selectedFiles);
        selectedFiles.splice(index, 1);
        console.log("After splice:", selectedFiles);
        renderFileList();
    }
    function renderFileList() {
        const tableBody = $('#existingDocumentsTable');
        tableBody.find('tr:contains("No documents found.")').remove();
        tableBody.find('tr[data-id="new"]').remove();

        selectedFiles.forEach((file, index) => {
            const row = $(`
            <tr data-id="new">
                <td style="text-align: left;">${file.name}</td>
                <td>
                    <button type="button"
                        class="btn btn-outline-danger btn-sm delete-document"
                        onclick="removeNewFile(${index})"
                        title="Delete">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>
            </tr>
        `);
            tableBody.append(row);
        });
        if (selectedFiles.length === 0 && tableBody.find('tr').length === 0) {
            tableBody.append(`<tr><td colspan="2" class="text-center">No documents found.</td></tr>`);
        }

    }
</script>
